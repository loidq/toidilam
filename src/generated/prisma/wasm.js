
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  status: 'status',
  country: 'country',
  bio: 'bio',
  photo: 'photo',
  dob: 'dob',
  resetToken: 'resetToken',
  settings: 'settings',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  cover: 'cover',
  avatar: 'avatar',
  maxStorageSize: 'maxStorageSize',
  desc: 'desc',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.OrganizationMemberScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  status: 'status',
  role: 'role',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.OrganizationStorageScalarFieldEnum = {
  id: 'id',
  type: 'type',
  config: 'config',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.MemberScalarFieldEnum = {
  id: 'id',
  role: 'role',
  userId: 'userId',
  projectId: 'projectId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  organizationId: 'organizationId',
  desc: 'desc',
  cover: 'cover',
  icon: 'icon',
  isArchived: 'isArchived',
  countMemberTask: 'countMemberTask',
  countProjectTask: 'countProjectTask',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ProjectViewScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  onlyMe: 'onlyMe',
  icon: 'icon',
  projectId: 'projectId',
  order: 'order',
  data: 'data',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ProjectSettingNotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  projectId: 'projectId',
  taskChanges: 'taskChanges',
  remind: 'remind',
  overdue: 'overdue',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  desc: 'desc',
  dueDate: 'dueDate',
  order: 'order',
  type: 'type',
  checklistDone: 'checklistDone',
  checklistTodos: 'checklistTodos',
  cover: 'cover',
  plannedStartDate: 'plannedStartDate',
  plannedDueDate: 'plannedDueDate',
  startDate: 'startDate',
  projectId: 'projectId',
  priority: 'priority',
  taskStatusId: 'taskStatusId',
  parentTaskId: 'parentTaskId',
  progress: 'progress',
  done: 'done',
  taskPoint: 'taskPoint',
  customFields: 'customFields',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.TaskStatusScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
  order: 'order',
  projectId: 'projectId',
  type: 'type'
};

exports.Prisma.TaskAssigneeScalarFieldEnum = {
  taskId: 'taskId',
  userId: 'userId',
  assignedAt: 'assignedAt'
};

exports.Prisma.TaskChecklistScalarFieldEnum = {
  id: 'id',
  title: 'title',
  order: 'order',
  taskId: 'taskId',
  done: 'done',
  doneAt: 'doneAt'
};

exports.Prisma.TaskPointScalarFieldEnum = {
  id: 'id',
  point: 'point',
  projectId: 'projectId',
  icon: 'icon'
};

exports.Prisma.TaskAutomationScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  projectId: 'projectId',
  when: 'when',
  then: 'then',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.VisionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  startDate: 'startDate',
  dueDate: 'dueDate',
  progress: 'progress',
  projectId: 'projectId',
  organizationId: 'organizationId',
  parentId: 'parentId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.FieldScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  type: 'type',
  icon: 'icon',
  hidden: 'hidden',
  width: 'width',
  order: 'order',
  desc: 'desc',
  data: 'data',
  config: 'config'
};

exports.Prisma.GridScalarFieldEnum = {
  id: 'id',
  title: 'title',
  cover: 'cover',
  projectId: 'projectId',
  customFields: 'customFields',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
  projectId: 'projectId'
};

exports.Prisma.TaskTagScalarFieldEnum = {
  taskId: 'taskId',
  tagId: 'tagId'
};

exports.Prisma.SchedulerScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  projectId: 'projectId',
  cronId: 'cronId',
  trigger: 'trigger',
  action: 'action',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.FileStorageScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  projectId: 'projectId',
  taskId: 'taskId',
  name: 'name',
  keyName: 'keyName',
  type: 'type',
  url: 'url',
  size: 'size',
  mimeType: 'mimeType',
  parentId: 'parentId',
  owner: 'owner',
  ownerType: 'ownerType',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.StatScalarFieldEnum = {
  id: 'id',
  type: 'type',
  data: 'data',
  userId: 'userId',
  projectId: 'projectId',
  organizationId: 'organizationId',
  year: 'year',
  month: 'month',
  date: 'date',
  updatedAt: 'updatedAt'
};

exports.Prisma.DashboardScalarFieldEnum = {
  id: 'id',
  title: 'title',
  projectId: 'projectId',
  isDefault: 'isDefault'
};

exports.Prisma.DashboardComponentScalarFieldEnum = {
  id: 'id',
  dashboardId: 'dashboardId',
  title: 'title',
  type: 'type',
  config: 'config',
  x: 'x',
  y: 'y',
  width: 'width',
  height: 'height',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  targetId: 'targetId',
  targetType: 'targetType',
  type: 'type',
  data: 'data',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  projectId: 'projectId',
  content: 'content',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  clientId: 'clientId',
  clientSecret: 'clientSecret',
  organizationId: 'organizationId',
  scopes: 'scopes',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.TimerScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  userId: 'userId',
  startTime: 'startTime',
  endTime: 'endTime',
  duration: 'duration',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FavoriteScalarFieldEnum = {
  id: 'id',
  name: 'name',
  icon: 'icon',
  link: 'link',
  userId: 'userId',
  organizationId: 'organizationId',
  type: 'type',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserStatus = exports.$Enums.UserStatus = {
  INACTIVE: 'INACTIVE',
  ACTIVE: 'ACTIVE'
};

exports.InvitationStatus = exports.$Enums.InvitationStatus = {
  REJECTED: 'REJECTED',
  ACCEPTED: 'ACCEPTED',
  INVITING: 'INVITING'
};

exports.OrganizationRole = exports.$Enums.OrganizationRole = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  MEMBER: 'MEMBER'
};

exports.OrgStorageType = exports.$Enums.OrgStorageType = {
  AWS_S3: 'AWS_S3',
  DIGITAL_OCEAN_S3: 'DIGITAL_OCEAN_S3'
};

exports.MemberRole = exports.$Enums.MemberRole = {
  GUEST: 'GUEST',
  MEMBER: 'MEMBER',
  MANAGER: 'MANAGER',
  LEADER: 'LEADER'
};

exports.ProjectViewType = exports.$Enums.ProjectViewType = {
  LIST: 'LIST',
  BOARD: 'BOARD',
  CALENDAR: 'CALENDAR',
  TIMELINE: 'TIMELINE',
  GOAL: 'GOAL',
  TEAM: 'TEAM',
  ACTIVITY: 'ACTIVITY',
  DASHBOARD: 'DASHBOARD',
  GRID: 'GRID'
};

exports.TaskType = exports.$Enums.TaskType = {
  TASK: 'TASK',
  BUG: 'BUG',
  NEW_FEATURE: 'NEW_FEATURE',
  IMPROVEMENT: 'IMPROVEMENT'
};

exports.TaskPriority = exports.$Enums.TaskPriority = {
  URGENT: 'URGENT',
  HIGH: 'HIGH',
  NORMAL: 'NORMAL',
  LOW: 'LOW'
};

exports.StatusType = exports.$Enums.StatusType = {
  DONE: 'DONE',
  INPROCESS: 'INPROCESS',
  TODO: 'TODO'
};

exports.FieldType = exports.$Enums.FieldType = {
  NUMBER: 'NUMBER',
  TEXT: 'TEXT',
  DATE: 'DATE',
  SELECT: 'SELECT',
  MULTISELECT: 'MULTISELECT',
  CHECKBOX: 'CHECKBOX',
  URL: 'URL',
  EMAIL: 'EMAIL',
  FILES: 'FILES',
  PHONE: 'PHONE',
  PERSON: 'PERSON',
  CREATED_AT: 'CREATED_AT',
  CREATED_BY: 'CREATED_BY',
  UPDATED_AT: 'UPDATED_AT',
  UPDATED_BY: 'UPDATED_BY'
};

exports.FileType = exports.$Enums.FileType = {
  FILE: 'FILE',
  FOLDER: 'FOLDER'
};

exports.FileOwnerType = exports.$Enums.FileOwnerType = {
  USER: 'USER',
  TASK: 'TASK',
  DISCUSSION: 'DISCUSSION',
  DOCUMENT: 'DOCUMENT'
};

exports.StatType = exports.$Enums.StatType = {
  PROJECT_TASK_BY_DAY: 'PROJECT_TASK_BY_DAY',
  MEMBER_TASK_BY_DAY: 'MEMBER_TASK_BY_DAY'
};

exports.DashboardComponentType = exports.$Enums.DashboardComponentType = {
  LINE: 'LINE',
  SUMMARY: 'SUMMARY',
  PIE: 'PIE',
  LISTTAB: 'LISTTAB',
  LIST: 'LIST',
  COLUMN: 'COLUMN',
  BURNDOWN: 'BURNDOWN',
  BURNUP: 'BURNUP'
};

exports.ActivityTargetType = exports.$Enums.ActivityTargetType = {
  TASK: 'TASK',
  PROJECT: 'PROJECT'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  TASK_CREATED: 'TASK_CREATED',
  TASK_TITLE_CHANGED: 'TASK_TITLE_CHANGED',
  TASK_DESC_CHANGED: 'TASK_DESC_CHANGED',
  TASK_DUEDATE_CHANGED: 'TASK_DUEDATE_CHANGED',
  TASK_ASSIGNEE_ADDED: 'TASK_ASSIGNEE_ADDED',
  TASK_ASSIGNEE_REMOVED: 'TASK_ASSIGNEE_REMOVED',
  TASK_STATUS_CREATED: 'TASK_STATUS_CREATED',
  TASK_STATUS_CHANGED: 'TASK_STATUS_CHANGED',
  TASK_PROGRESS_CHANGED: 'TASK_PROGRESS_CHANGED',
  TASK_PRIORITY_CHANGED: 'TASK_PRIORITY_CHANGED',
  TASK_POINT_CHANGED: 'TASK_POINT_CHANGED',
  TASK_VISION_CHANGED: 'TASK_VISION_CHANGED',
  TASK_COMMENT_CREATED: 'TASK_COMMENT_CREATED',
  TASK_COMMENT_CHANGED: 'TASK_COMMENT_CHANGED',
  TASK_COMMENT_REMOVED: 'TASK_COMMENT_REMOVED',
  TASK_ATTACHMENT_ADDED: 'TASK_ATTACHMENT_ADDED',
  TASK_ATTACHMENT_REMOVED: 'TASK_ATTACHMENT_REMOVED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Organization: 'Organization',
  OrganizationMember: 'OrganizationMember',
  OrganizationStorage: 'OrganizationStorage',
  Member: 'Member',
  Project: 'Project',
  ProjectView: 'ProjectView',
  ProjectSettingNotification: 'ProjectSettingNotification',
  Task: 'Task',
  TaskStatus: 'TaskStatus',
  TaskAssignee: 'TaskAssignee',
  TaskChecklist: 'TaskChecklist',
  TaskPoint: 'TaskPoint',
  TaskAutomation: 'TaskAutomation',
  Vision: 'Vision',
  Field: 'Field',
  Grid: 'Grid',
  Tag: 'Tag',
  TaskTag: 'TaskTag',
  Scheduler: 'Scheduler',
  FileStorage: 'FileStorage',
  Stat: 'Stat',
  Dashboard: 'Dashboard',
  DashboardComponent: 'DashboardComponent',
  Activity: 'Activity',
  Comment: 'Comment',
  Application: 'Application',
  Timer: 'Timer',
  Favorite: 'Favorite'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
